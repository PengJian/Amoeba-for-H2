/* Generated By:JJTree&JavaCC: Do not edit this line. AladdinParserTokenManager.java */
/*
 * Copyright (C) 2008 Struct chen <piratebase@sina.com>
 * 	This program is free software; you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, 
 * or (at your option) any later version. 
 * 
 * 	This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 * See the GNU General Public License for more details. 
 * 	You should have received a copy of the GNU General Public License along with this program; 
 * if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package com.meidusa.amoeba.aladdin.parser.sql;
import com.meidusa.amoeba.parser.dbobject.*;
import com.meidusa.amoeba.parser.expression.*;
import com.meidusa.amoeba.parser.function.*;
import com.meidusa.amoeba.parser.statement.*;
import java.math.BigDecimal;
import java.util.Map;
import java.util.HashMap;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Calendar;
import java.sql.Connection;
import com.meidusa.amoeba.sqljep.function.Comparative;

/** Token Manager. */
public class AladdinParserTokenManager implements AladdinParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x1000040L) != 0L)
            return 2;
         if ((active2 & 0x20000000L) != 0L)
            return 6;
         if ((active0 & 0x20L) != 0L)
            return 45;
         if ((active0 & 0xffffffffffffffc0L) != 0L || (active1 & 0x1fffffffffffffL) != 0L || (active2 & 0xe0e7fc000L) != 0L)
         {
            jjmatchedKind = 123;
            return 46;
         }
         if ((active2 & 0x80000000L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0xe0ffe40fff9fedc0L) != 0L || (active1 & 0x1ffffeffff7ff7L) != 0L || (active2 & 0xe0e7fc000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 1;
            }
            return 46;
         }
         if ((active0 & 0x1f001bf000601200L) != 0L || (active1 & 0x100008008L) != 0L)
            return 46;
         return -1;
      case 2:
         if ((active0 & 0xf4f7e78f7bd9ec00L) != 0L || (active1 & 0x1fefeefff74ef7L) != 0L || (active2 & 0xe0e7fc000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 2;
            }
            return 46;
         }
         if ((active0 & 0x81840840601c0L) != 0L || (active1 & 0x101100083108L) != 0L)
            return 46;
         return -1;
      case 3:
         if ((active2 & 0x7e0000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 3;
            }
            return 18;
         }
         if ((active0 & 0xf0c40f8c785a0c00L) != 0L || (active1 & 0x1cff6de6f704fcL) != 0L || (active2 & 0xe0e01c000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 3;
            }
            return 46;
         }
         if ((active0 & 0x433e0430381e000L) != 0L || (active1 & 0x3008219004a03L) != 0L)
            return 46;
         return -1;
      case 4:
         if ((active0 & 0xc0c40e081a5b0c00L) != 0L || (active1 & 0x1cff2d00e600ecL) != 0L || (active2 & 0x806014000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 4;
            return 46;
         }
         if ((active2 & 0x7e8000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 4;
            return 18;
         }
         if ((active0 & 0x3020018460000000L) != 0L || (active1 & 0x40e6110410L) != 0L)
            return 46;
         return -1;
      case 5:
         if ((active1 & 0x500000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xc0800c0000130c00L) != 0L || (active1 & 0x1cae0500c00048L) != 0L || (active2 & 0x802014000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 5;
            return 46;
         }
         if ((active0 & 0x4402081a480000L) != 0L || (active1 & 0x128002600a4L) != 0L)
            return 46;
         if ((active2 & 0x7e8000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 5;
            return 18;
         }
         return -1;
      case 6:
         if ((active1 & 0x500000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x10080000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active2 & 0x7e8000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 6;
            }
            return 18;
         }
         if ((active0 & 0x8000000000110000L) != 0L || (active1 & 0xc220500000048L) != 0L || (active2 & 0x802014000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 6;
            }
            return 46;
         }
         if ((active0 & 0x40800c0000020c00L) != 0L || (active1 & 0x840000c00000L) != 0L)
            return 46;
         return -1;
      case 7:
         if ((active1 & 0x500000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x10080000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L || (active1 & 0xc200400000048L) != 0L || (active2 & 0x800010000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 7;
            }
            return 46;
         }
         if ((active1 & 0x400000L) != 0L)
            return 18;
         if ((active2 & 0x7e8000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 7;
            }
            return 18;
         }
         if ((active0 & 0x8000000000100000L) != 0L || (active1 & 0x20100000000L) != 0L || (active2 & 0x4000L) != 0L)
            return 46;
         return -1;
      case 8:
         if ((active1 & 0x500000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x10080000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0xc200400000000L) != 0L || (active2 & 0x800004000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 8;
            return 46;
         }
         if ((active0 & 0x10000L) != 0L || (active1 & 0x48L) != 0L)
            return 46;
         if ((active2 & 0x7f8000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 8;
            return 18;
         }
         return -1;
      case 9:
         if ((active1 & 0x500000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x10080000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active2 & 0x6f8000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 9;
            return 18;
         }
         if ((active1 & 0xc200400000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 9;
            return 46;
         }
         return -1;
      case 10:
         if ((active1 & 0x500000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x10080000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x8200000000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 10;
            return 46;
         }
         if ((active2 & 0x6f8000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 10;
            return 18;
         }
         if ((active1 & 0x400000000L) != 0L)
            return 46;
         if ((active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active1 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x10080000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active2 & 0x6f8000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 11;
            return 18;
         }
         if ((active1 & 0x8000000000000L) != 0L)
            return 46;
         if ((active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active2 & 0x4f8000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 12;
            return 18;
         }
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active2 & 0x4e0000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 13;
            return 18;
         }
         if ((active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active1 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active2 & 0x4a0000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 14;
            return 18;
         }
         if ((active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active2 & 0x4a0000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 15;
            return 18;
         }
         if ((active1 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active1 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active2 & 0x480000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 16;
            return 18;
         }
         return -1;
      case 17:
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 17;
            return 18;
         }
         return -1;
      case 18:
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 18;
            return 18;
         }
         return -1;
      case 19:
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100L);
      case 37:
         return jjStopAtPos(0, 160);
      case 40:
         return jjStopAtPos(0, 130);
      case 41:
         return jjStopAtPos(0, 132);
      case 42:
         return jjStopAtPos(0, 151);
      case 43:
         return jjStopAtPos(0, 156);
      case 44:
         return jjStopAtPos(0, 131);
      case 45:
         return jjStartNfaWithStates_0(0, 157, 6);
      case 46:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000L);
      case 47:
         return jjStartNfaWithStates_0(0, 159, 9);
      case 59:
         return jjStopAtPos(0, 133);
      case 60:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2200L);
      case 61:
         return jjStopAtPos(0, 135);
      case 62:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800L);
      case 64:
         return jjStartNfaWithStates_0(0, 5, 45);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3c0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1c00L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400000001e000L, 0x10010000000000L, 0x4000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xfe0000L, 0x1000002000L, 0x200004000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1f000000L, 0x40000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3e0000000L, 0x100020000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x8000000000L, 0x8000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1bf000000000L, 0x80100000008L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x3c00000000000L, 0x40000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6400001010L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0xf8000000000000L, 0x20L, 0x2000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0xbf00000000000000L, 0x4L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x7020080000003L, 0x8000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8c00800000b80L, 0x7f0000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20001000c400L, 0xc00000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f0000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe00000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf000000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         break;
      case 61:
         if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         break;
      case 62:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800006000L, active1, 0x1020e00440L, active2, 0x20a000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4400200e0400L, active1, 0xf800a00000183L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 56, 46);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000L, active1, 0x7004800L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000100000L, active1, 0x24c8002010L, active2, 0xc0000c000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x43000040L, active1, 0x10000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4001bc004000180L, active1, 0x100030008L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 79, 46);
         return jjMoveStringLiteralDfa2_0(active0, 0xb200080400800L, active1, 0x13c000001220L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x40004L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x7e0000L);
      case 82:
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000500800000L, active1, 0x200010000000L, active2, 0x4000000L);
      case 83:
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 46);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 46);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0x180000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000L, active2, 0x10000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x60f0000200000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0x40000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 12, 46);
         break;
      case 124:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000L, active1, 0x3600200000003L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000008020000L, active1, 0xc00000000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 46);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 46);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000008000000000L, active1, 0x40000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0x4004000000000000L, active1, 0x3004000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L, active2, 0x8000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200010000000L, active1, 0x10000004130000L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0x430000200080000L, active1, 0x20020200080L, active2, 0x7e0000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000000000L, active1, 0x10040000200L, active2, 0xc00000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x86000000010L, active2, 0x8000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000540800800L, active1, 0x800L, active2, 0x4000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x4040000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8100000c00040L, active2, 0x10000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20003106000L, active1, 0x800000000000L, active2, 0x4000L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 46);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 72, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0xa000084020000400L, active1, 0x10800000cL, active2, 0x202000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x8010000000L, active2, 0L);
      case 86:
      case 118:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 46);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 46);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 100, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x7e0000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000048000000L, active1, 0x40020L, active2, 0x10000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000400000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0x100000c00000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3000000000000L, active2, 0x8000000L);
      case 69:
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 46);
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 46);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 46);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 46);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 123, 46);
         else if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x30800b8002080000L, active1, 0x14000100000088L, active2, 0x800000000L);
      case 72:
      case 104:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000L, active2, 0x8000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000800020000L, active1, 0x8000040000004L, active2, 0L);
      case 75:
      case 107:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 46);
         break;
      case 76:
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 46);
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x20040000000800L, active1, 0x60004000400L, active2, 0L);
      case 77:
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 46);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 46);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000100000L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80800010000L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 46);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 46);
         break;
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 46);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000010000L, active1, 0x400402000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0x800020000000L, active2, 0x4000000L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 46);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0x4000000040L, active2, 0x4000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x2000200010L, active2, 0x2000000L);
      case 87:
      case 119:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 46);
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x3000000000000L, active2, 0L);
      case 40:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(4, 155);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000010000L, active1, 0xc040000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000L, active2, 0xc0000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L, active2, 0x500000L);
      case 69:
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 46);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 89, 46);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 46);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000c00L, active1, 0x100000200000L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 84, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 46);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2100000L, active1, 0x810000000060L, active2, 0x14000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000020000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0x10000800000000L, active2, 0x200000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000004L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 46);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 46);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x80020000000000L, active1, 0x80100000008L, active2, 0x2000000L);
      case 83:
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 46);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 46);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 123, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000L, active2, 0x800020000L);
      case 84:
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 46);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 46);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 46);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000010080000L, active1, 0x402000040000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 88:
      case 120:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 46);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x500000000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20800L, active1, 0x220000c00000L, active2, 0x2500000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000010000L, active1, 0x1000000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 46);
         break;
      case 69:
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 46);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 46);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 46);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 46);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 46);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 46);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000400L, active1, 0x80000000000L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 46);
         break;
      case 71:
      case 103:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8080000000000000L, active1, 0x40000000000L, active2, 0x40000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 78:
      case 110:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000100000L, active1, 0L, active2, 0x4000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000L, active2, 0x200000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 46);
         break;
      case 83:
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 46);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000008L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 46);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 46);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 46);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x14000000000040L, active2, 0x800000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000L, active2, 0x80000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10080000000000L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000100000000L, active2, 0x800020000L);
      case 67:
      case 99:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 46);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0x220000000000L, active2, 0x104000L);
      case 69:
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 46);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000008L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8100000000040L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 46);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 123, 46);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400000L);
      case 78:
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 46);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 46);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 46);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 111, 46);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 46);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 46);
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000L, active2, 0x8000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0x400000000000L, active2, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 18);
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x12000400000008L, active2, 0x600000L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 63, 46);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000L, active2, 0x8000L);
      case 75:
      case 107:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 105, 46);
         break;
      case 76:
      case 108:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 96, 46);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L, active2, 0x800000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000L, active2, 0x14000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x410000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8400000000000L, active2, 0x200000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 123, 18);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000L, active2, 0x20000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 70, 46);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000400000000L, active2, 0x8000L);
      case 80:
      case 112:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 123, 46);
         break;
      case 82:
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 16, 46);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x44000L);
      case 84:
      case 116:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 67, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x20000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active1, 0x10000000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active1, 0x8000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x200000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active1, 0x80000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active1, 0x4100000000000L, active2, 0x40000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active1, 0x1000000000000L, active2, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x10000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active1, 0x2000000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active1, 0x400400000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active1, 0x200000000000L, active2, 0x4000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x88000L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active1, 0x4000000000000L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x80000L);
      case 68:
      case 100:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(10, 98, 46);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0x80000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x200000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x8000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active1, 0x8000000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active1, 0x2000000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active1, 0x200000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x410000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active1, 0x10000000000000L, active2, 0x20000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active1, 0x400000000000L, active2, 0x40000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active1, 0x1000000000000L, active2, 0L);
      case 87:
      case 119:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(10, 123, 46);
         break;
      case 88:
      case 120:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(10, 108);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active1, 0x200000000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active1, 0x400000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 115, 46);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 123, 18);
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x20000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active1, 0x2000000000000L, active2, 0x10000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active1, 0x4000000000000L, active2, 0x80000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active1, 0x10000000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active1, 0x1000000000000L, active2, 0x8000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x440000L);
      case 88:
      case 120:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(11, 107);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active1, 0x400000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active1, 0x15000000000000L, active2, 0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active1, 0x200000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x40000L);
      case 78:
      case 110:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(12, 123, 18);
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x400000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x20000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active1, 0x2000000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(12, 123, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0x4000000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(13, 112);
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x400000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active1, 0x200000000000L, active2, 0x80000L);
      case 84:
      case 116:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(13, 116);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 123, 18);
         return jjMoveStringLiteralDfa14_0(active1, 0x2400000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x400000L);
      case 68:
      case 100:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(14, 114);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa15_0(active1, 0x2000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active1, 0x400000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x20000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active1, 0x200000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, active2);
      return 15;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(15, 113);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active1, 0x200000000000L, active2, 0x80000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active1, 0x400000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x400000L);
      case 84:
      case 116:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(15, 123, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(14, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, active2);
      return 16;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active1, 0x200000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(16, 110);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x400000L);
      case 84:
      case 116:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(16, 123, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(15, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, active2);
      return 17;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa18_0(active1, 0x200000000000L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(16, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, active2);
      return 18;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa19_0(active1, 0x200000000000L, active2, 0L);
      case 83:
      case 115:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(18, 123, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(17, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa20_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa21_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa22_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(20, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa23_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(21, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa24_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(22, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 86:
      case 118:
         return jjMoveStringLiteralDfa25_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(23, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, active1, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa26_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa26_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(24, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, active1, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(26, 109);
         break;
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec2 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec3 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec6 = {
   0x3ff00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x3ff0000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec11 = {
   0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec12 = {
   0x0L, 0x0L, 0x420040000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec13 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfc3fffffffffffffL
};
static final long[] jjbitVec14 = {
   0xffffffL, 0xffffffffffff0000L, 0xf9ff01ffffffffffL, 0x1f00030003L
};
static final long[] jjbitVec15 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffc7f7fffL
};
static final long[] jjbitVec16 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
};
static final long[] jjbitVec17 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec18 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0x7cffffffffffffffL, 0x60002f7fffL
};
static final long[] jjbitVec19 = {
   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
};
static final long[] jjbitVec20 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
};
static final long[] jjbitVec21 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec22 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec23 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec24 = {
   0xd7ffffffffffeL, 0x7fL, 0x200d6caefef02596L, 0x3000005fL
};
static final long[] jjbitVec25 = {
   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec26 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec27 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec28 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec29 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec30 = {
   0x0L, 0x8000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec31 = {
   0x1fbfd503f2ffc84L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec32 = {
   0x3e000000000020L, 0xfffffffffffffffeL, 0xfffffffe781fffffL, 0x77ffffffffffffffL
};
static final long[] jjbitVec33 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0x7fffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec36 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0x5f7ffdff80f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec38 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec39 = {
   0x0L, 0xffd7000000000000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec40 = {
   0x7fffffe00000000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
static final long[] jjbitVec41 = {
   0x7fffffe00000000L, 0xfffe03ff000007ffL, 0x7cffffffffffffffL, 0x3ff0060002f7fffL
};
static final long[] jjbitVec42 = {
   0x23ffffffffffffe0L, 0xffc3ff000000L, 0x3c5fdfffff99fe0L, 0x3ffc3b0000000L
};
static final long[] jjbitVec43 = {
   0x36dfdfffff987e0L, 0x1cffc05e000000L, 0x23edfdfffffbafe0L, 0xffc100000000L
};
static final long[] jjbitVec44 = {
   0x23cdfdfffff99fe0L, 0xffc3b0000000L, 0x3bfc718d63dc7e0L, 0xff8000000000L
};
static final long[] jjbitVec45 = {
   0x3effdfffffddfe0L, 0xffc300000000L, 0x3effdfffffddfe0L, 0xffc340000000L
};
static final long[] jjbitVec46 = {
   0x3fffdfffffddfe0L, 0xffc300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec47 = {
   0xd7ffffffffffeL, 0x3ff007fL, 0x200d6caefef02596L, 0x33ff005fL
};
static final long[] jjbitVec48 = {
   0x3ff00000000L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec49 = {
   0x7fffffe03ff0000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 45;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 46:
               case 18:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(18);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 58)
                  {
                     if (kind > 129)
                        kind = 129;
                     jjCheckNAdd(33);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(24, 25);
                  else if (curChar == 39)
                     jjCheckNAddStates(4, 6);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 46)
                     jjCheckNAdd(2);
                  else if (curChar == 63)
                  {
                     if (kind > 129)
                        kind = 129;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(0);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar != 45)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 42)
                     jjCheckNAddStates(7, 9);
                  break;
               case 12:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 13:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 14:
                  if (curChar == 47 && kind > 122)
                     kind = 122;
                  break;
               case 15:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 19:
                  if (curChar == 39)
                     jjCheckNAddStates(4, 6);
                  break;
               case 20:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 22:
                  if (curChar == 39 && kind > 126)
                     kind = 126;
                  break;
               case 23:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 24:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar == 34 && kind > 127)
                     kind = 127;
                  break;
               case 29:
                  if ((0x3ff201000000000L & l) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 31:
                  if (curChar == 63 && kind > 129)
                     kind = 129;
                  break;
               case 32:
                  if (curChar != 58)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 36:
                  if (curChar != 46)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(44);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 45:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(17, 18);
                  }
                  else if (curChar == 64)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(18);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(17, 18);
                  }
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(17, 18);
                  }
                  else if (curChar == 96)
                     jjCheckNAddTwoStates(27, 28);
                  else if (curChar == 64)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 3:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 7:
                  if (kind > 121)
                     kind = 121;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
               case 13:
                  jjCheckNAddTwoStates(13, 11);
                  break;
               case 16:
                  if (curChar == 64)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(18);
                  break;
               case 20:
                  jjAddStates(4, 6);
                  break;
               case 21:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 24:
                  jjAddStates(14, 15);
                  break;
               case 26:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 27:
                  if (curChar == 64)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar == 96 && kind > 128)
                     kind = 128;
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 45:
               case 17:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 46:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(17, 18);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAdd(18);
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(0);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddTwoStates(17, 18);
                  }
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(0);
                  break;
               case 7:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
               case 13:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 18:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(18);
                  break;
               case 20:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(4, 6);
                  break;
               case 24:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(14, 15);
                  break;
               case 28:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(16, 18);
                  break;
               case 29:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 33:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjstateSet[jjnewStateCnt++] = 33;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 45 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   35, 36, 41, 42, 20, 21, 22, 11, 12, 14, 29, 30, 4, 5, 24, 25, 
   28, 29, 30, 39, 40, 43, 44, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec7[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            if ((jjbitVec1[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      default : 
         if ((jjbitVec8[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec40[i2] & l2) != 0L);
      default : 
         if ((jjbitVec11[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec49[i2] & l2) != 0L);
      default : 
         if ((jjbitVec11[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\100", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\50", "\54", "\51", "\73", "\56", "\75", "\41\75", 
"\74\76", "\76", "\76\75", "\74", "\74\75", null, null, null, null, null, null, null, 
null, null, "\52", "\56\52", null, null, null, "\53", "\55", "\174\174", "\57", 
"\45", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xc87fffffffffffffL, 0xfffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x600000000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x600000000000000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[45];
private final int[] jjstateSet = new int[90];
protected char curChar;
/** Constructor. */
public AladdinParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public AladdinParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 45; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
